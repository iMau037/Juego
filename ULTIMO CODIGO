import random
import pygame
import time
import sys
import os

from pygame.locals import *

# ---------------------------------------
# ---------------------------------------

pygame.init()
fondo_mainmenu = pygame.image.load("Juego\\sprites\\rsz_wallpapaer_menu.png")
fondo_salir = pygame.image.load("Juego\\sprites\\rsz_dino_end_game.png")
fondo_final = pygame.image.load("Juego\\sprites\\fondo_final.png")
fondo_final_win = pygame.image.load("Juego\\sprites\\fondo_final_win.png")
withe = (255, 255, 255)
nivel_fianal = False

class Youwin(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load("Juego\\sprites\\winwin.png").convert()
        self.image.set_colorkey([255,255,255])
        self.rect = self.image.get_rect()
        self.rect.y=250

class Background(pygame.sprite.Sprite):
    def __init__(self, image_file, location):
        # pygame.sprite.Sprite.__init__(self)  #call Sprite initializer
        self.image = image_file
        self.rect = self.image.get_rect()
        self.rect.left, self.rect.top = location


class Nube(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load("Juego\\sprites\\cloud.jpg")
        self.image.set_colorkey(withe)
        self.WIDTH, self.HEIGHT = 170, 90
        self.image = pygame.transform.scale(self.image, (self.WIDTH, self.HEIGHT))
        self.x = 1000
        self.y = 100
        self.speed = -3

    def update(self):
        self.x += self.speed
        if self.x < 0:
            self.x = 1000

    def draw(self, screen):
        screen.blit(self.image, (self.x, self.y))


Background_opcion = Background(fondo_salir, [0, 0])
Background_Menu = Background(fondo_mainmenu, [0, 0])


## CLASE ENEMIGOS
class Enemigo1(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load("Juego\\sprites\\dragon_verde_mediano.png")
        self.image.set_colorkey(withe)
        self.rect = self.image.get_rect()
        self.y = self.rect.y
        self.x = self.rect.x
        self.speedy = 3
        self.speedx = -3

    ## MOBIMIENTO ENEMIGOS
    def update(self):
        self.rect.y += self.speedy
        self.y=self.rect.y
        self.rect.x += self.speedx
        self.x=self.rect.x
        if self.rect.y < 200:
            self.speedy *= -1
        if self.rect.y > 400:
            self.speedy *= -1


## CREACION DE ENEMIGOS CON SU POSICION X y AGREGACION A LA LISTA DE ENEMIGOS
pos_x = 1000
enemigos_lista = pygame.sprite.Group()
for i in range(50):
    enemigo = Enemigo1()
    enemigo.rect.x = pos_x
    enemigo.rect.y = 200
    enemigos_lista.add(enemigo)
    pos_x += 1300


## CLASE ENEMIGOS
class Enemigo2(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load("Juego\\sprites\\enemigo3.jpg")
        self.image.set_colorkey(withe)
        self.rect = self.image.get_rect()
        self.WIDTH, self.HEIGHT = 90, 60
        self.image = pygame.transform.scale(self.image, (self.WIDTH, self.HEIGHT))
        self.y = self.rect.y
        self.x = self.rect.x
        self.speedy = 3
        self.speedx = -3

    ## MOBIMIENTO ENEMIGOS
    def update(self):
        self.rect.y += self.speedy
        self.y=self.rect.y
        self.rect.x += self.speedx
        self.x=self.rect.x
        if self.rect.y < 200:
            self.speedy *= -1
        if self.rect.y > 400:
            self.speedy *= -1


## CREACION DE ENEMIGOS CON SU POSICION X y AGREGACION A LA LISTA DE ENEMIGOS

enemigos_lista2 = pygame.sprite.Group()
for i in range(50):
    enemigo2 = Enemigo2()
    enemigo2.rect.x = pos_x
    enemigo2.rect.y = 200
    enemigos_lista2.add(enemigo2)
    pos_x += 1300
## CREACION DE CURSOR PARA INTERACTUAR EN EL MENU
class Cursor(pygame.Rect):
    def __init__(self):
        pygame.Rect.__init__(self, 0, 0, 1, 1)

    def update(self):
        self.left, self.top = pygame.mouse.get_pos()


# creamos el sprite boton
class Boton(pygame.sprite.Sprite):
    def __init__(self, imagen1, imagen2, x, y):
        self.imagen_normal = imagen1
        self.imagen_seleccion = imagen2
        self.imagen_actual = self.imagen_normal
        self.rect = self.imagen_actual.get_rect()
        self.rect.left, self.rect.top = (x, y)
        # self.sonido = pygame.mixer.Sound('D:\\Documentos owo\\Documentos\\Universidad\\Seminarios de Lenguajes\\Codigo\\TP Final\\Juego-master\\sonidos\\Mousclik.wav')

    def update(self, pantalla, cursor):
        if cursor.colliderect(self.rect):
            self.imagen_actual = self.imagen_seleccion
        else:
            self.imagen_actual = self.imagen_normal

        def draw(self, screen):
            screen.blit(self.image, (self.x, self.y))

        pantalla.blit(self.imagen_actual, self.rect)


# ----------------------------------------------------------------
play = pygame.image.load("Juego\\sprites\\jugar blanco.png")
play_2 = pygame.image.load("Juego\\sprites\\jugar verde.png")
opcion_1 = pygame.image.load("Juego\\sprites\\opciones blanco.png")
opcion_2 = pygame.image.load("Juego\\sprites\\opciones celeste.png")
exit = pygame.image.load("Juego\\sprites\\Salir blanco.png")
exit_2 = pygame.image.load("Juego\\sprites\\Salir rojo.png")
altavoz = pygame.image.load("Juego\\sprites\\altavoz.png")
vlmen_arriba = pygame.image.load("Juego\\sprites\\mas.png")
vlmen_abajo = pygame.image.load("Juego\\sprites\\restar.png")
muted = pygame.image.load("Juego\\sprites\\mudo.png")
sonido = pygame.image.load("Juego\\sprites\\sonido.png")
HUD_sonido = Background(sonido, [600, 50])
HUD_muted = Background(muted, [600, 50])
HUD_vlmenAbajo = Background(vlmen_abajo, [680, 50])
HUD_vlmen = Background(vlmen_arriba, [680, 50])
altavoz_pantalla = Background(altavoz, [600, 50])
boton1 = Boton(play, play_2, 300, 150)
boton2 = Boton(opcion_1, opcion_2, 300, 300)
boton3 = Boton(exit, exit_2, 300, 450)
cursor1 = Cursor()
# ----------------------------------------------------------------
# op_Img = pygame.image.load("D:\\Documentos owo\\Documentos\\Universidad\\Seminarios de Lenguajes\\Codigo\\TP Final\\pygame-unla-master\\sprites\\op_re.png")
clock = pygame.time.Clock()
font = pygame.font.SysFont(None, 20)


def draw_text(text, font, color, surface, x, y):
    textobj = font.render(text, 1, color)
    textrect = textobj.get_rect()
    textrect.topleft = (x, y)
    surface.blit(textobj, textrect)


click = False
pause = False
screen = pygame.display.set_mode((800, 600))

all_sprites = pygame.sprite.Group()
bullets = pygame.sprite.Group()
white = (0, 0, 0)


class Player():
    def __init__(self):
        self.Img = pygame.image.load("Juego\\sprites\\dragonPlayer1.png")
        self.runImg1 = pygame.image.load("Juego\\sprites\\dragonPlayer2.png")
        self.Img.set_colorkey([255, 255, 255])  # antes todo 255
        self.WIDTH, self.HEIGHT = 70, 90
        self.Img = pygame.transform.scale(self.Img, (self.WIDTH, self.HEIGHT))
        self.image = self.Img
        self.rect = self.image.get_rect()
        self.x = 20
        self.y = 450
        self.g = -0.15  # Gravity
        self.up = 13  # Initial upward velocity
        self.t = 0  # time
        self.hitbox = pygame.Rect(self.x + 5, self.y, self.WIDTH - 15, self.HEIGHT - 5)

        self.runImg1 = pygame.image.load("Juego\\sprites\\dragonPlayer1.png")
        self.runImg1.set_colorkey([255, 255, 255])  # antes todo 255
        self.runImg2 = pygame.image.load("Juego\\sprites\\dragonPlayer2.png")
        self.runImg2.set_colorkey([255, 255, 255])  # antes todo 255
        self.runImg1 = pygame.transform.scale(self.runImg1, (self.WIDTH, self.HEIGHT))
        self.runImg2 = pygame.transform.scale(self.runImg2, (self.WIDTH, self.HEIGHT))

        self.duck1 = pygame.image.load("Juego\\sprites\\dino_ducking1.png")
        self.duck2 = pygame.image.load("Juego\\sprites\\dino_ducking2.png")
        self.duck1 = pygame.transform.scale(self.duck1, (self.WIDTH + 15, self.HEIGHT))
        self.duck2 = pygame.transform.scale(self.duck2, (self.WIDTH + 15, self.HEIGHT))
        self.ducking = False

        self.duckImgs = [self.duck1, self.duck2]

        self.runImgs = [self.runImg1, self.runImg2]

        self.jump_sound = pygame.mixer.Sound("Juego\\sonidos\\jump.wav")
        self.count = 0
        self.jumping = False

    def jump(self):
        self.y -= self.up  # Start jumping
        self.jumping = True
        self.jump_sound.play()

    def update(self):
        if self.y < 450:  # check if jumping
            self.up = self.up + self.g * self.t  # v = u + at
            self.y -= self.up
            self.t += 0.15  # incrementing time

        if self.y > 450:  # check if the jump is complete and resetting all variables
            self.y = 450
            self.t = 0
            self.up = 13
            self.jumping = False

        if self.ducking:
            self.hitbox = pygame.Rect(self.x + 5, self.y + 20, self.WIDTH + 12, self.HEIGHT - 20)
            self.image = self.duckImgs[int(self.count) % 2]
            self.count += 0.2
        elif self.jumping:
            self.hitbox = pygame.Rect(self.x + 5, self.y, self.WIDTH - 15, self.HEIGHT - 5)
            self.image = self.Img
        else:
            self.hitbox = pygame.Rect(self.x + 5, self.y, self.WIDTH - 15, self.HEIGHT - 5)
            self.image = self.runImgs[int(self.count) % 2]
            self.count += 0.2

    def draw(self, screen):
        screen.blit(self.image, (self.x, self.y))
        # pygame.draw.rect(screen, (255, 0, 0), self.hitbox, 2) In case you want to see the hitbox

    ## DEFINICION DE FUNCION DISPARAR
    def shoot(self):
        bullet = Bullet(100, self.y)
        all_sprites.add(bullet)
        bullets.add(bullet)


## CREACION DE CLASE SPRITE (FUEGO) -disparo
class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.image.load("Juego\\sprites\\fuego_sprite.png")
        self.image.set_colorkey([255, 255, 255])
        self.rect = self.image.get_rect()
        self.rect.y = y
        self.rect.centerx = x
        self.speedx = +10

    # MOBIMIENTO DEL FUEGO
    def update(self):
        self.rect.x += self.speedx
        if self.rect.bottom < 0:
            self.kill()


##CREACION DE CLASE DE VOLCANES
class Volcan():
    def __init__(self):
        self.image0 = pygame.image.load("Juego\\sprites\\cacti-small.png")
        self.image0.set_colorkey([255, 255, 255])
        self.image1 = pygame.image.load("Juego\\sprites\\cacti-big.png")
        self.image1.set_colorkey([255, 255, 255])
        self.width0 = 60
        self.height = 80
        self.width1 = 80
        self.image0 = pygame.transform.scale(self.image0, (self.width0, self.height))
        self.image1 = pygame.transform.scale(self.image1, (self.width1, self.height))
        self.cacti_dist = 550
        self.x0 = 1350
        self.y = 450
        self.x1 = self.x0 + self.cacti_dist
        self.x2 = self.x1 + self.cacti_dist - 100
        self.speed = 3
        ## HITBOX PARA DETECTAR COLICION CON PLAYER
        self.hitbox0 = pygame.Rect(self.x0, self.y, self.width0, self.height)
        self.hitbox1 = pygame.Rect(self.x1, self.y, self.width1, self.height)
        self.hitbox2 = pygame.Rect(self.x2, self.y, self.width0, self.height)
        self.hitboxes = [self.hitbox0, self.hitbox1, self.hitbox2]

    def update(self):
        self.x0 -= self.speed
        self.x1 -= self.speed
        self.x2 -= self.speed

        self.hitbox0 = pygame.Rect(self.x0, self.y, self.width0, self.height)
        self.hitbox1 = pygame.Rect(self.x1, self.y, self.width1, self.height)
        self.hitbox2 = pygame.Rect(self.x2, self.y, self.width0, self.height)
        self.hitboxes = [self.hitbox0, self.hitbox1, self.hitbox2]

        if self.x0 < -30:
            # self.x0 = 1500
            self.x0 = 1400
        elif self.x1 < -30:
            # self.x1 = 1500
            self.x1 = self.x0 + random.randint(300, 700)
        elif self.x2 < -30:
            # self.x2 = 1500
            self.x2 = self.x1 + random.randint(300, 700)

    def draw(self, screen):
        screen.blit(self.image0, (self.x0, self.y))
        screen.blit(self.image1, (self.x1, self.y))
        screen.blit(self.image0, (self.x2, self.y))


## CREACION DEL SUELO
class Ground():
    def __init__(self):
        self.ground_length = 1202
        self.image1 = pygame.image.load("Juego\\sprites\\ground.png")
        self.image1.set_colorkey([255, 255, 255])
        self.image1_x = 0
        self.image1_y = 500
        self.image2 = pygame.image.load("Juego\\sprites\\ground.png")
        self.image2_x = self.image1_x + self.ground_length
        self.image2_y = self.image1_y
        self.speed = 4

    def draw(self, screen):
        screen.blit(self.image1, (self.image1_x, self.image1_y))
        screen.blit(self.image2, (self.image2_x, self.image2_y))

    def update(self):
        self.image1_x -= self.speed
        self.image2_x -= self.speed

        if self.image1_x + self.ground_length < 0:
            self.image1_x = self.image2_x + self.ground_length
        elif self.image2_x + self.ground_length < 0:
            self.image2_x = self.image1_x + self.ground_length


def Pause():
    pause = True
    while pause:

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_r:
                    pause = False


def options():
    running = True
    while running:
        # screen.fill((255, 255, 255))
        screen.blit(Background_Menu.image, Background_Menu.rect)
        draw_text('options', font, (255, 255, 255), screen, 20, 20)
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()  # creo que no hace falta esto aca
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    running = False

        pygame.display.update()
        clock.tick(60)


def exit_game():
    running = True
    while running:
        # screen.blit(Background_opcion.image, Background_opcion.rect)
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()  # creo que no hace falta esto aca
            if event.type == pygame.KEYDOWN:  # pregunta si realmente quiere salir
                if event.key == K_y:
                    pygame.exit()
                elif event.key == K_n:
                    main_menu()
        pygame.display.update()
        clock.tick(60)
    # pygame.time.delay(3000)


# ----------------------------------------------------------------
# ----------------------------------------------------------------
running = True


def main_menu():
    sonido = pygame.mixer.Sound('Juego\\sonidos\\x.wav')
    menu_sound = pygame.mixer.music.load('Juego\\sonidos\\02 - Cloud Country.mp3')
    pygame.mixer.music.play(-1)
    while running:
        keys = pygame.key.get_pressed()
        # screen.fill((0, 0, 0)) no hace falta ya que tiene wallpapaer
        # screen.blit(fondo_mainmenu,[0,0] ) #el wallpapaer
        screen.blit(Background_Menu.image, Background_Menu.rect)
        # pygame.surface.blit(screen)        :D no hace falta ya que tiene wallpapaer
        mx, my = pygame.mouse.get_pos()
        # button_1 = pygame.Rect(50, 100, 200, 50)   //rectangulos con orientacion a otros menus
        # button_2 = pygame.Rect(50, 200, 200, 50)

        # ------Area de dibujo
        draw_text('main menu', font, (255, 255, 255), screen, 20, 20)

        cursor1.update()  # si no llamo este metodo no funcionara al ahcer click
        click = False

        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()

            if event.type == pygame.MOUSEBUTTONDOWN:
                if cursor1.colliderect(boton1.rect):
                    sonido.play()
                    Game()
                if cursor1.colliderect(boton2.rect):
                    options()
                if cursor1.colliderect(boton3.rect):
                    exit_game()
        # ---------------Seccion Sonido---------------
        # Control del audio
        # Baja volumen
        if keys[pygame.K_KP_MINUS] and pygame.mixer.music.get_volume() > 0.0:
            pygame.mixer.music.set_volume(pygame.mixer.music.get_volume() - 0.01)
            screen.blit(altavoz_pantalla.image, altavoz_pantalla.rect)
            screen.blit(HUD_vlmenAbajo.image, HUD_vlmenAbajo.rect)

        elif keys[pygame.K_KP_MINUS] and pygame.mixer.music.get_volume() == 0.0:
            screen.blit(HUD_muted.image, HUD_muted.rect)

        # Sube volumen
        if keys[pygame.K_KP_PLUS] and pygame.mixer.music.get_volume() < 1.0:
            pygame.mixer.music.set_volume(pygame.mixer.music.get_volume() + 0.01)
            screen.blit(altavoz_pantalla.image, altavoz_pantalla.rect)
            screen.blit(HUD_vlmen.image, HUD_vlmen.rect)

        elif keys[pygame.K_KP_PLUS] and pygame.mixer.music.get_volume() == 1.0:
            screen.blit(HUD_sonido.image, HUD_sonido.rect)

            # Desactivar sonido
        elif keys[pygame.K_m]:
            pygame.mixer.music.set_volume(0.0)
            screen.blit(HUD_muted.image, HUD_muted.rect)

        # Reactivar sonido
        elif keys[pygame.K_COMMA]:
            pygame.mixer.music.set_volume(1.0)
            screen.blit(HUD_sonido.image, HUD_sonido.rect)

        boton1.update(screen, cursor1)  # estos son los botones nuevos
        boton2.update(screen, cursor1)
        boton3.update(screen, cursor1)
        pygame.display.update()
        clock.tick(60)


def Game():
    fondo = pygame.image.load("Juego\\sprites\\fondo.png")
    fondo_juego = pygame.transform.scale(fondo, (800, 600))
    screen = pygame.display.set_mode((800, 600))
    clock = pygame.time.Clock()
    font = pygame.font.Font("freesansbold.ttf", 20)
    check_point = pygame.mixer.Sound("Juego\\sonidos\\checkpoint.wav")
    death_sound = pygame.mixer.Sound("Juego\\sonidos\\die.wav")
    pygame.display.set_caption("Dino Run")
    dino_icon = pygame.image.load("Juego\\sprites\\dino_.png")

    pygame.display.set_icon(dino_icon)

    game_over = pygame.image.load("Juego\\sprites\\game_over.png")
    replay_button = pygame.image.load("Juego\\sprites\\deplay.png")
    logo = pygame.image.load("Juego\\sprites\\logo.png")
    GREY = (240, 240, 240)
    WHITE = (255, 255, 255)
    GREEN = (0, 255, 0)
    BLACK = (0, 0, 0)
    ground = Ground()
    player = Player()
    volcan = Volcan()
    nube = Nube()
    running = False
    play_game = True  # esta variable activa o no el loop
    dead = False
    high_score_value = 0
    FPS = 36

    while play_game:  # mientras seaa True andara este loop que es el que contiene los demas loop (es loop principal)

        if not dead:
            ######## screen.fill(GREEN)
            screen.blit(fondo_juego, [0, 0])
            ground.draw(screen)
            screen.blit(player.image, (player.x, player.y))
            screen.blit(logo, (200, 70))

        pygame.display.update()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                play_game = False  # si decidimos cerrar la ventana la variable cambia a false y se cierra el loop principal
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:  # si presiona SPACE arranca el otro loop y todos los procesos que hacen funcionar el resto del juego
                    running = True  # este booleano se pone en True al presionar barra espaciadora y activa el loop de mas abajo
                    ground = Ground()
                    player = Player()

                    volcan = Volcan()

                    dead = False
                    running = True
                    score_value = 0
                    pos_x = 400
                    for i in range(50):
                        enemigo = Enemigo1()
                        enemigo.rect.x = pos_x
                        enemigo.rect.y = 200
                        enemigo2 = Enemigo2()
                        enemigo2.rect.x = pos_x+2000
                        enemigo2.rect.y = 200
                        enemigos_lista.add(enemigo)
                        enemigos_lista.add(enemigo2)
                        pos_x += 1100


        while running:
            clock.tick(FPS)  # Controlling Frames Per Second
            nivel_final=False
            score = font.render("Score: " + str(int(score_value)), True, (200, 200, 200))
            score_value += 0.25
            high_score_value = max(high_score_value, score_value)
            high_score = font.render("High Score: " + str(int(high_score_value)), True, (200, 200, 200))
            #####screen.fill(GREY)
            screen.blit(fondo_juego, [0, 0])

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_SPACE:
                        player.jump()
                    elif event.key == pygame.K_DOWN:
                        player.ducking = True
                    elif event.key == pygame.K_e:
                        Pause()
                    elif event.key == pygame.K_c:
                        player.shoot()
                elif event.type == pygame.KEYUP:
                    if event.key == pygame.K_DOWN:
                        player.ducking = False

            ground.update()
            ground.draw(screen)
            all_sprites.draw(screen)
            all_sprites.update()
            enemigos_lista.draw(screen)
            enemigos_lista.update()

            player.update()
            player.draw(screen)

            nube.update()
            nube.draw(screen)

            volcan.update()
            volcan.draw(screen)
            hits = pygame.sprite.groupcollide(enemigos_lista, all_sprites, True, True)
            for block in hits:
                score_value += 30

            hits2= pygame.sprite.spritecollide(player, enemigos_lista, True)

            screen.blit(score, (650, 30))
            screen.blit(high_score, (450, 30))




            if int(score_value) % 100 == 0 and int(
                    score_value) % 3 == 0:  # Increase game speed after score crosses a multiple of 300
                volcan.speed += 0.25
                ground.speed += 0.25

            if score_value > 1 and score_value % 100 == 0:  # Checkpoint sound after score crosses a multiple of 100
                check_point.play()

            closest_hitbox = min(volcan.hitbox0, volcan.hitbox1, volcan.hitbox2)  # Hitbox of closest cactus

            if player.hitbox.colliderect(closest_hitbox):  # Collision detection with closest cactus
                death_sound.play()
                dead = True
                screen.blit(game_over, (200, 70))
                screen.blit(replay_button, (360, 100))

            pygame.display.update()

            for e in enemigos_lista:
                y2=e.y+70
                if y2>player.y and e.x<(player.x+50):
                    dead=True

            if score_value > 150:
                nivel_final = True
                enemigos_lista.empty()
                pos_x2=player.x+800
                for i in range(50):
                    pos_y=random.randint(0,100)
                    enemigo = Enemigo1()
                    enemigo.rect.x = pos_x2
                    enemigo.rect.y = 200+pos_y
                    pos_y = random.randint(0, 100)
                    enemigo2 = Enemigo2()
                    enemigo2.rect.x = pos_x2 + 25
                    enemigo2.rect.y = 200+pos_y
                    enemigos_lista.add(enemigo)
                    enemigos_lista.add(enemigo2)
                    pos_x2 += 50
#######################################################################################
            ##############################################################################
            ##############################################################################
            while nivel_final:
                clock.tick(FPS)  # Controlling Frames Per Second

                #####screen.fill(GREY)
                screen.blit(fondo_final, [0, 0])

                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        pygame.quit()
                    elif event.type == pygame.KEYDOWN:
                        if event.key == pygame.K_SPACE:
                            player.jump()
                        elif event.key == pygame.K_DOWN:
                            player.ducking = True
                        elif event.key == pygame.K_e:
                            Pause()
                        elif event.key == pygame.K_c:
                            player.shoot()
                    elif event.type == pygame.KEYUP:
                        if event.key == pygame.K_DOWN:
                            player.ducking = False

                ground.draw(screen)
                all_sprites.draw(screen)
                all_sprites.update()
                enemigos_lista.draw(screen)
                enemigos_lista.update()

                i=0
                for e in enemigos_lista:
                    e.speedx+100
                    i+=1
                if i==0:
                    screen.blit(fondo_final_win, [0, 0])
                    

                    



                player.update()
                player.draw(screen)
                hits = pygame.sprite.groupcollide(enemigos_lista, all_sprites, True, True)



                pygame.display.update()

            for e in enemigos_lista:
                y2=e.y+70
                if y2>player.y and e.x<(player.x+50):
                    dead=True










# enconding: utf-8

# Game()
main_menu()

"""
para cargar sonidos : <variable>.pygame.load.sound('') """
para cargar sonidos : <variable>.pygame.load.sound('') """
